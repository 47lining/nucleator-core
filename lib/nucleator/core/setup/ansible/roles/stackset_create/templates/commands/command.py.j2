# Copyright 2015 47Lining LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from nucleator.cli.utils import ValidateCustomerAction
from nucleator.cli.command import Command
from nucleator.cli import properties
from nucleator.cli import ansible
import os, subprocess, re
import string


class {{stackset_name | capitalize}}(Command):
    
    name = "{{stackset_name}}"

    def parser_init(self, subparsers):
        """
        Initialize parsers for this command.
        """
        # add parser for builder command
        {{stackset_name}}_parser = subparsers.add_parser('{{stackset_name}}')
        {{stackset_name}}_subparsers={{stackset_name}}_parser.add_subparsers(dest="subcommand")

        # provision subcommand
        {{stackset_name}}_provision={{stackset_name}}_subparsers.add_parser('provision', help="Provision a new nucleator {{stackset_name}} stackset")
        {{stackset_name}}_provision.add_argument("--customer", required=True, action=ValidateCustomerAction, help="Name of customer from nucleator config")
        {{stackset_name}}_provision.add_argument("--cage", required=True, help="Name of cage from nucleator config")

        # configure subcommand
        {{stackset_name}}_configure={{stackset_name}}_subparsers.add_parser('configure', help="Configure a new nucleator {{stackset_name}} stackset")
        {{stackset_name}}_configure.add_argument("--customer", required=True, action=ValidateCustomerAction, help="Name of customer from nucleator config")
        {{stackset_name}}_configure.add_argument("--cage", required=True, help="Name of cage from nucleator config")

        # delete subcommand
        {{stackset_name}}_delete={{stackset_name}}_subparsers.add_parser('delete', help="delete specified nucleator {{stackset_name}} stackset")
        {{stackset_name}}_delete.add_argument("--customer", action=ValidateCustomerAction, required=True, help="Name of customer from nucleator config")
        {{stackset_name}}_delete.add_argument("--cage", required=True, help="Name of cage from nucleator config")

    def provision(self, **kwargs):
        """
        This command provisions a new {{stackset_name}} in the indicated Customer Cage. 
        """
        cli = Command.get_cli(kwargs)
        cage = kwargs.get("cage", None)
        customer = kwargs.get("customer", None)
        if cage is None or customer is None:
            raise ValueError("cage and customer must be specified")
        extra_vars={
            "cage_name": cage,
            "customer_name": customer,
            "verbosity": kwargs.get("verbosity", None),
            "debug_credentials": kwargs.get("debug_credentials", None),
        }

        extra_vars["{{stackset_name}}_deleting"]=kwargs.get("{{stackset_name}}_deleting", False)

        
        extra_vars["cli_stackset_name"] = "{{stackset_name}}"
        
        command_list = []
        command_list.append("account")
        command_list.append("cage")
        command_list.append("{{stackset_name}}")

        cli.obtain_credentials(commands = command_list, cage=cage, customer=customer, verbosity=kwargs.get("verbosity", None), debug_credentials=kwargs.get("debug_credentials", None))
        
        return cli.safe_playbook(self.get_command_playbook("{{stackset_name}}_provision.yml"),
                                 is_static=True, # dynamic inventory not required
                                 **extra_vars
        )

    def configure(self, **kwargs):
        """
        This command configures a new {{stackset_name}} in the indicated Customer Cage. 
        """
        cli = Command.get_cli(kwargs)
        cage = kwargs.get("cage", None)
        customer = kwargs.get("customer", None)
        if cage is None or customer is None:
            raise ValueError("cage and customer must be specified")
        extra_vars={
            "cage_name": cage,
            "customer_name": customer,
            "verbosity": kwargs.get("verbosity", None),
            "debug_credentials": kwargs.get("debug_credentials", None),
        }
        
        extra_vars["cli_stackset_name"] = "{{stackset_name}}"
        
        command_list = []
        command_list.append("account")
        command_list.append("cage")
        command_list.append("{{stackset_name}}")

        cli.obtain_credentials(commands = command_list, cage=cage, customer=customer, verbosity=kwargs.get("verbosity", None), debug_credentials=kwargs.get("debug_credentials", None))
        
        return cli.safe_playbook(self.get_command_playbook("{{stackset_name}}_configure.yml"),
                                 is_static=True, # dynamic inventory not required
                                 **extra_vars
        )

    def delete(self, **kwargs):
        """
        This command deletes a previously provisioned {{stackset_name}} from the indicated Customer Cage.
        """

        kwargs["{{stackset_name}}_deleting"]=True
        # Initialize any additional required variables
        return self.provision(**kwargs)


# Create the singleton for auto-discovery
command = {{stackset_name | capitalize }}()
